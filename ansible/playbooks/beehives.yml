---
- hosts: all
  become: yes
  tasks:
    - name: Update Cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

- hosts: app01

  vars:
    user_dir: "/home/vagrant"
    repo_dir: "{{user_dir}}/pms18"
    app_dir: "{{repo_dir}}/QuickStart-App"
    git_repo_url: "https://github.com/theohitman/pms18.git"
    git_repo_branch: "main"
  
  tasks:

  - name: Create beekeeper database
    postgresql_db:
      name: "{{db.name}}"
    become: yes
    become_user: postgres
    delegate_to: "{{db.host}}"
    run_once: yes
  
  - name: Create beekeeper db user
    postgresql_user:
      name: "{{db.user}}"
      password: "{{db.pass}}"
      state: present
    become: yes
    become_user: postgres
    delegate_to: "{{db.host}}"
    run_once: yes

  - name: Grant privileges on beekeeper db user to beekeeper db 
    postgresql_privs:
      privs: ALL
      database: "{{db.name}}"
      roles: "{{db.user}}"
      type: database
    become: yes
    become_user: postgres
    delegate_to: "{{db.host}}"
    run_once: yes  

  - name: ensure github.com is a known host
    lineinfile:
      dest: "{{user_dir}}/.ssh/known_hosts"
      create: yes
      state: present
      line: "{{lookup('pipe', 'ssh-keyscan -t rsa github.com')}}"
      regexp: "^github\\.com"

  - name: clone flask project
    git:
      repo: "{{git_repo_url}}"
      version: "{{git_repo_branch}}"
      clone: yes
      dest: "{{repo_dir}}"
      force: yes 
    changed_when: true

  - name: copy env file
    shell : "cp {{app_dir}}/.env.example {{app_dir}}/.env"

  - name: populate  ~/.env
    lineinfile:
      dest: "{{app_dir}}/.env"
      state: present
      regexp: "^{{item.key}}="
      line: "{{item.key}}='{{item.value}}'"
    with_items:
      - "{{app.env | dict2items}}"
    notify: restart flask

  - name: install and activate virtual environment
    block:
    - name: setup virtual environment
      pip:
        requirements: "{{app_dir}}/requirements.txt"
        virtualenv: "{{app_dir}}/fvenv"
        virtualenv_python: python3
        state: forcereinstall
    rescue:
    - name: "APT - install misc packages"
      apt:
        pkg:
          - python3
          - python3-pip
          - python3-virtualenv
          - virtualenv
          - libmysqlclient-dev
          - mycli
          - pgcli
          - libpq-dev
        update_cache: yes
      become: yes
      become_user: root
      when: hostvars[inventory_hostname].ansible_distribution == 'Ubuntu'
    always:
    - name: setup virtual environment
      pip:
        requirements: "{{app_dir}}/requirements.txt"
        virtualenv: "{{app_dir}}/fvenv"
        virtualenv_python: python3
        state: forcereinstall

    - name: copy flask service file
      template:
        src: ../files/flask/flask.service.j2
        dest: "/etc/systemd/system/flask.service"
      become: yes
      become_user: root
      notify: restart flask

    - name: ensure flask service started
      service: 
        name: flask
        state: started
        enabled: yes
      become: yes

  handlers:

  - name: restart flask
    service:
      name: flask
      state: restarted
    become: yes

- hosts: webserver

  tasks:

  - name: install and configure nginx
    block:

    - name: "APT - install nginx"
      apt:
        name: nginx
        update_cache: yes

    - name: copy nginx conf file
      template:
        src: ../files/nginx/project.nginx.j2
        dest: "/etc/nginx/sites-available/flask"

    - name: copy nginx https conf file
      template:
        src: ../files/nginx/project.https.nginx.j2
        dest: "/etc/nginx/sites-available/flaskssl"

    - name: copy certificates
      copy:
        src: "{{item}}"
        dest: /etc/ssl/private/
      with_items:
        - ../files/certs/server.crt
        - ../files/certs/server.key
      
    - name: enable flask site in nginx
      file:
        src: "/etc/nginx/sites-available/flask"
        dest: "/etc/nginx/sites-enabled/flask"
        state: link
      notify: restart nginx

    - name: enable flaskssl site in nginx
      file:
        src: "/etc/nginx/sites-available/flaskssl"
        dest: "/etc/nginx/sites-enabled/flaskssl"
        state: link
      notify: restart nginx

    - name: de-activate default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx
    
    become: yes
    become_user: root


  handlers:

  - name: restart nginx
    service:
      name: nginx
      state: restarted
    become: yes